


#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub struct GlPoint<T> {
    x: T,
    y: T,
    z: T,
}

impl PartialEq for GlPoint<T> {
    fn eq(&self, b: &GlPoint<T>) -> bool {
        fl_eq(self.x, b.x) && fl_eq(self.y, b.y) && fl_eq(self.z, b.z)
    }
}

impl GlPoint {
    #[allow(dead_code)]
    pub fn new(x: f64, y: f64, z: f64) -> GlPoint {
        GlPoint { x, y, z }
    }
}

impl GlPrimative for GlPoint {
    fn to_tuple(&self) -> (f64, f64, f64, usize) {
        (self.x, self.y, self.z, 1)
    }
}

impl ops::Add<GlVector> for GlPoint {
    type Output = GlPoint;

    fn add(self, rhs: GlVector) -> GlPoint {
        GlPoint::new(self.x + rhs.x, self.y + rhs.y, self.z + rhs.z)
    }
}

impl ops::Sub<GlPoint> for GlPoint {
    type Output = GlVector;

    fn sub(self, rhs: GlPoint) -> GlVector {
        GlVector::new(self.x - rhs.x, self.y - rhs.y, self.z - rhs.z)
    }
}

impl ops::Sub<GlVector> for GlPoint {
    type Output = GlPoint;
    fn sub(self, rhs: GlVector) -> GlPoint {
        GlPoint::new(self.x - rhs.x, self.y - rhs.y, self.z - rhs.z)
    }
}

#[cfg(test)]
mod tests {
    // Note this useful idiom: importing names from outer (for mod tests) scope.
    use super::*;

    /* Scenario
        Scenario: GlPoint() creates point
            Given p ← GlPoint::new(4, -4, 3)
            Then p = GlPoint{4, -4, 3}
    */
    #[test]
    fn test_create_point() {
        assert_eq!(
            GlPoint::new(2.3, 42.5, 84.0).to_tuple(),
            (2.3, 42.5, 84.0, 1)
        );
    }

    /* Scenario
        Scenario: GlVector() creates tuples with w=0
            Given v ← GlVector(4, -4, 3)
            Then v = GlVector(4, -4, 3)
    */
    #[test]
    fn test_create_vector() {
        assert_eq!(
            GlVector::new(2.3, 42.5, 84.0).to_tuple(),
            (2.3, 42.5, 84.0, 0)
        );
    }

    #[test]
    fn test_point_plus_vector() {
        let a: GlPoint = GlPoint::new(2.3, 42.5, 84.0);
        let b: GlVector = GlVector::new(2.3, 42.5, 84.0);
        let new_point: GlPoint = a + b;
        assert_eq!(new_point, GlPoint::new(4.6, 85.0, 168.0));
    }

    #[test]
    fn test_vector_plus_vector() {
        let a: GlVector = GlVector::new(2.3, 42.5, 84.0);
        let b: GlVector = GlVector::new(2.3, -42.5, 84.0);
        let new_vector: GlVector = a + b;
        assert_eq!(new_vector, GlVector::new(4.6, 0.0, 168.0));
    }

    #[test]
    fn test_point_minus_point() {
        let a: GlPoint = GlPoint::new(2.3, 42.5, 84.0);
        let b: GlPoint = GlPoint::new(2.3, 42.5, 0.0);
        let new_vector = a - b;
        assert_eq!(new_vector, GlVector::new(0.0, 0.0, 84.0));
    }
    #[test]
    fn test_point_minus_vector() {
        let a: GlPoint = GlPoint::new(2.3, 42.5, 84.0);
        let b: GlVector = GlVector::new(2.3, 42.5, 0.0);
        let new_point = a - b;
        assert_eq!(new_point, GlPoint::new(0.0, 0.0, 84.0));
    }
    
}
